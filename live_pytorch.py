# -*- coding: utf-8 -*-
"""live-pytorch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s108WmqSVH9MILOjSAu29QyAEjExOWAP
"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/ma-xu/LIVE.git
# %cd LIVE

# change gcc version to 5.5
!apt-get install -qq gcc-5 g++-5 -y
!ln -s /usr/bin/gcc-5 /usr/local/cuda/bin/gcc;
!ln -s /usr/bin/g++-5 /usr/local/cuda/bin/g++;
# !sudo apt-get update
# !sudo apt-get upgrade
!gcc -v # ensure gcc version is 5.5

# remove tensorflow for install
!pip3 uninstall tensorflow -y
# install required libs
# !pip install torch==1.9.0+cu111 torchtext==0.10.0 torchvision==0.10.0+cu111 -f https://download.pytorch.org/whl/torch/ -f https://download.pytorch.org/whl/torchvision/
# !pip install torch==1.7.0+cu110 torchvision==0.8.1+cu110 -f https://download.pytorch.org/whl/torch_stable.html
!pip3 install svgwrite svgpathtools cssutils numba torch-tools scikit-fmm easydict visdom
!pip3 install numpy scikit-image ffmpeg opencv-python==4.5.4.60
!pip3 install cmake==3.18.2
!pip uninstall imgaug -y && pip uninstall albumentations -y && pip install git+https://github.com/aleju/imgaug.git -y
!pip3 install -U PyYAML

# Commented out IPython magic to ensure Python compatibility.
# install diffvg
# %cd DiffVG
import torch
import os
gpu_name = torch.cuda.get_device_name(0)
print(gpu_name)
if "K80" in gpu_name:
  replace_str = 's/set(CUDA_NVCC_FLAGS "\${CUDA_NVCC_FLAGS} -std=c++11")/set(CUDA_NVCC_FLAGS "\${CUDA_NVCC_FLAGS} -std=c++14 -gencode=arch=compute_37,code=sm_37")/gi'
  replace_str = "sed -i '"+replace_str+ "' CMakeLists.txt"
  os.system(replace_str)
  print("change cmake for K80")
elif "T4" in gpu_name:
  replace_str = 's/set(CUDA_NVCC_FLAGS "\${CUDA_NVCC_FLAGS} -std=c++11")/set(CUDA_NVCC_FLAGS "\${CUDA_NVCC_FLAGS} -std=c++14 -gencode=arch=compute_75,code=sm_75")/gi'
  replace_str = "sed -i '"+replace_str+ "' CMakeLists.txt"
  os.system(replace_str)
  print("change cmake for T4")

# Commented out IPython magic to ensure Python compatibility.

!sudo apt-get install -y libsdl2-image-dev
!git submodule update --init --recursive
!python3 setup.py install
# %cd ..

# Commented out IPython magic to ensure Python compatibility.
# run demo
# %cd LIVE
!python main.py --config config/base.yaml --debug --experiment experiment_5x1 --signature smile --target figures/smile.png --log_dir log/

from moviepy.editor import *
from os import listdir
from os.path import isfile, join
import ipywidgets as widgets
video_avi_path = "./log/999999999999_smile/video-avi/"
onlyfiles = [f for f in listdir(video_avi_path) if isfile(join(video_avi_path, f))]
onlyfiles.sort()
onlyfiles.reverse()
print(onlyfiles)
print(f"The last video {onlyfiles[-1]} is:")
print(f"\nThe log files are saved to log folder.\n")
clip=VideoFileClip(os.path.join(video_avi_path, onlyfiles[-1]))
clip.ipython_display(width=280)

!git pull
!pwd

import sys
sys.path.append("/usr/local/lib/python3.7/dist-packages/diffvg-0.0.1-py3.7-linux-x86_64.egg")

# Commented out IPython magic to ensure Python compatibility.
# sys.path.append('/content/LIVE/LIVE')
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--debug', action='store_true', default=True)
    parser.add_argument("--config", default="config/base.yaml", type=str)
    parser.add_argument("--experiment", default="experiment_5x1", type=str)
    parser.add_argument("--seed", type=int)
    parser.add_argument("--target", type=str, default="figures/smile.png", help="target image path")
    parser.add_argument('--log_dir', metavar='DIR', default="log")
    parser.add_argument('--initial', type=str, default="random", choices=['random', 'circle'])
    parser.add_argument('--signature', default="smile", nargs='+', type=str)
    parser.add_argument('--seginit', nargs='+', type=str)
    parser.add_argument("--num_segments", type=int, default=4)
    cfg = edict()
    args = parser.parse_args()
    cfg.debug = args.debug
    cfg.config = args.config
    cfg.experiment = args.experiment
    cfg.seed = args.seed
    cfg.target = args.target
    cfg.log_dir = args.log_dir
    cfg.initial = args.initial
    cfg.signature = args.signature
    # set cfg num_segments in command
    cfg.num_segments = args.num_segments
    if args.seginit is not None:
        cfg.seginit = edict()
        cfg.seginit.type = args.seginit[0]
        if cfg.seginit.type == 'circle':
            cfg.seginit.radius = float(args.seginit[1])
    return cfg

# %cd LIVE
# %load main_colab.py
from main_colab import main_func

main_func()

# Commented out IPython magic to ensure Python compatibility.
# %tb